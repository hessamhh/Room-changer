import { GoogleGenAI, Modality, Type } from '@google/genai';
import type { ImageFile, BoundingBox } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

export const editImage = async (
  image: ImageFile,
  prompt: string
): Promise<ImageFile> => {
  if (!image) {
    throw new Error('An image must be provided.');
  }
  if (!prompt) {
    throw new Error('A prompt must be provided.');
  }

  try {
    const detailedPrompt = `You are an expert at reimagining spaces. Your task is to transform the environment of the room in the provided image based on the theme: "${prompt}".

Analyze the theme you are given.
- If the theme is an INDOOR scene (e.g., 'cozy library', 'futuristic lab', 'steampunk workshop'), you MUST preserve the original room's structure (walls, windows, doors) and layout. Re-decorate the existing furniture, objects, and surfaces to match the theme.
- If the theme is an OUTDOOR or OPEN environment (e.g., 'enchanted forest', 'beach paradise', 'alien planet landscape'), you MUST realistically REMOVE the walls and ceiling, replacing them with the described environment. The furniture and objects from the original room should remain, seamlessly integrated into the new open scene as if they were placed there.

Key Rules to Follow:
1.  Preserve the key furniture and objects from the original image. Do not add or remove major items.
2.  Integrate the objects naturally into the new environment, including appropriate lighting and shadows.
3.  Maintain the original perspective and camera angle.
4.  The final image should be photorealistic and high-quality.`;

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: image.base64.split(',')[1],
              mimeType: image.mimeType,
            },
          },
          { text: detailedPrompt },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return {
          base64: `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`,
          mimeType: part.inlineData.mimeType,
          name: `edited-${image.name}`,
        };
      }
    }

    throw new Error('No image was generated by the model.');
  } catch (error) {
    console.error('Error editing image with Gemini:', error);
    if (error instanceof Error) {
        throw new Error(`Failed to edit image: ${error.message}`);
    }
    throw new Error('An unknown error occurred while editing the image.');
  }
};

export const extendImageTo16x9 = async (image: ImageFile): Promise<ImageFile> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: image.base64.split(',')[1],
              mimeType: image.mimeType,
            },
          },
          { text: 'Extend this image to a 16:9 aspect ratio. Intelligently fill in the new areas to seamlessly continue the existing scene. Do not change the content of the original image area. The result should be a natural continuation of the room.' },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });
    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return {
          base64: `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`,
          mimeType: part.inlineData.mimeType,
          name: `extended-${image.name}`,
        };
      }
    }
    throw new Error('No image was generated by the model for extension.');
  } catch (error) {
    console.error('Error extending image with Gemini:', error);
    if (error instanceof Error) {
        throw new Error(`Failed to extend image: ${error.message}`);
    }
    throw new Error('An unknown error occurred while extending the image.');
  }
};


export const detectRoomCoordinates = async (image: ImageFile): Promise<BoundingBox> => {
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: {
                parts: [
                    {
                        inlineData: {
                            data: image.base64.split(',')[1],
                            mimeType: image.mimeType,
                        },
                    },
                    {
                        text: "Analyze this screenshot of a video call. Identify the bounding box of the main video feed showing the person's room. Exclude any application UI, browser tabs, taskbars, or other people's video feeds."
                    }
                ]
            },
            config: {
                responseMimeType: 'application/json',
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        x: { type: Type.INTEGER, description: 'The x-coordinate of the top-left corner.' },
                        y: { type: Type.INTEGER, description: 'The y-coordinate of the top-left corner.' },
                        width: { type: Type.INTEGER, description: 'The width of the bounding box.' },
                        height: { type: Type.INTEGER, description: 'The height of the bounding box.' }
                    },
                    required: ['x', 'y', 'width', 'height']
                }
            }
        });
        
        const jsonString = response.text;
        const result = JSON.parse(jsonString);
        
        // Basic validation
        if (typeof result.x === 'number' && typeof result.y === 'number' && typeof result.width === 'number' && typeof result.height === 'number') {
            return result;
        } else {
            throw new Error("Invalid coordinate format received from model.");
        }

    } catch (error) {
        console.error('Error detecting room coordinates:', error);
        throw new Error("Failed to auto-crop the image. Please try a different screenshot or upload a file manually.");
    }
};